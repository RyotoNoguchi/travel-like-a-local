import { createApolloClient } from '@/apolloClient'
import '@/app/globals.css'
import { zain } from '@/app/ui/fonts'
import { Header } from '@/app/ui/header'
import { type LANGUAGE, LOGO_ASSET_ID } from '@/constants'
import { type Query, type QueryAssetArgs } from '@/generated/graphql'
import { GET_ASSET_QUERY } from '@/graphql/query'
import { routing } from '@/i18n/routing'
import type { Metadata } from 'next'
import { NextIntlClientProvider } from 'next-intl'
import { getMessages } from 'next-intl/server'
import { notFound } from 'next/navigation'
import type { FC } from 'react'

export const metadata: Metadata = {
  title: 'Create Next App',
  description: 'Generated by create next app'
}

type Props = {
  children: React.ReactNode
  params: { locale: string }
}

const LocaleLayout: FC<Props> = async ({ children, params }) => {
  // See: https://nextjs.org/docs/messages/sync-dynamic-apis#possible-ways-to-fix-it
  const { locale } = await params
  // Ensure that the incoming `locale` is valid
  if (!routing.locales.includes(locale as (typeof routing.locales)[number])) {
    notFound()
  }

  const client = createApolloClient()
  const { data } = await client.query<Query, QueryAssetArgs>({
    query: GET_ASSET_QUERY,
    variables: {
      id: LOGO_ASSET_ID
    }
  })

  const asset = data.asset
  const logo = asset && asset.url ? { url: asset.url, title: asset.title || 'Default Title' } : null

  // Providing all messages to the clientã€€side is the easiest way to get started
  const messages = await getMessages({ locale })

  return (
    <html lang={locale}>
      <body className={`${zain.className} antialiased`}>
        <NextIntlClientProvider messages={messages}>
          {logo ? <Header logo={logo} locale={locale as LANGUAGE} /> : null}
          {children}
        </NextIntlClientProvider>
      </body>
    </html>
  )
}

export default LocaleLayout
